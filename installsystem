#!/bin/sh
set -eu

LogTrace()
{
    DATE="$(date)"
    MSG="${1}"

    echo "${DATE} - TRACE - ${MSG}"
}

LogError()
{
    DATE="$(date)"
    MSG="${1}"

    echo "${DATE} - ERROR- ${MSG}"
}

if [ -z "$(command -v sudo)" ]
then
    LogError "Script must run as root with sudo"
    exit 1
fi

# PATHS
PATH_LOCAL_BIN="$HOME/.local/bin"
PATH_LOCAL_REPO="$HOME/dev/oss"
PATH_TEMP="$(mktemp --suffix "-install-system" -d)"
PATH_FLATPAK="/var/lib/flatpak/app"
PATH="${PATH}:${HOME}/.cargo/bin:${PATH_LOCAL_BIN}"

SYSTEM_DEPS=
SNAP_DEPS=
FLATPAK_DEPS=
PPA=


mkdir -p "${PATH_LOCAL_BIN}" "${PATH_LOCAL_REPO}"
# Prereq
SUDO=$(command -v sudo)

# Add apt dependency
# usage : AddAptDep <executable-name> <Package name> <external ppa>
AddAptDep()
{
    ADD_DEP_EXECUTABLE="$1"
    # Disable undefined hanfling as variables are optional
    set +u
    ADD_DEP_APT="${2}"
    ADD_DEP_PPA="${3}"
    set -u
    ADD_DEP_EXEC_TEST=


    if [ -z "${ADD_DEP_APT}" ]
    then
        ADD_DEP_APT="${ADD_DEP_EXECUTABLE}"
    fi

    # Disable error handling to check if command exist
    set +e 
    ADD_DEP_EXEC_TEST="$(command -v "${ADD_DEP_EXECUTABLE}")"
    set -e

    if [ -z "$ADD_DEP_EXEC_TEST" ]
    then
        # Add PPA if exist
        if [ -n "$ADD_DEP_PPA" ]
        then
            PPA="${PPA} ${ADD_DEP_PPA}"
        fi

        # Append list
        SYSTEM_DEPS="$SYSTEM_DEPS ${ADD_DEP_APT}"
    fi
}

# Add Flatpak dependency
# usage : AddFlatpakDep <Package name>
AddFlatpakDep()
{
    ADD_DEP_FLATPAK_NAME="${1}"

    # check if it is found in flatpak install directory
    if [ ! -e "${PATH_FLATPAK}/${ADD_DEP_FLATPAK_NAME}" ]
    then
        LogTrace "Adding flatpak: ${ADD_DEP_FLATPAK_NAME}"
        FLATPAK_DEPS="${FLATPAK_DEPS} ${ADD_DEP_FLATPAK_NAME}"
    fi
}

# Add snapcraft dependency
# usage : AddSnapDep <Executable name> <Package name>
AddSnapDep()
{
    ADD_DEP_SNAP_EXECUTABLE="$1"
    ADD_DEP_SNAP="${2}"

    # Disable error handling to check if command exist
    set +e 
    ADD_DEP_SNAP_EXEC_TEST="$(command -v "${ADD_DEP_SNAP_EXECUTABLE}")"
    set -e

    if [ -z "$ADD_DEP_SNAP_EXEC_TEST" ]
    then
        LogTrace "Adding snap: ${ADD_DEP_SNAP}"
        SNAP_DEPS="$SNAP_DEPS ${ADD_DEP_SNAP}"
    fi
}

# Run apt install with loaded packages
TriggerAPT()
{
    LogTrace "Updating ubuntu and installing deps"
    if [ -n "${PPA}" ]
    then

        # Disable error handling to check if command exist       
        set +e
        ADD_REPO="$(command -v apt-add-repository)"
        set -e

        if [ -z "${ADD_REPO}" ]
        then
            LogTrace "apt-add-repositroy check: \"${ADD_REPO}\""
            LogTrace "apt-add-repositroy not found. Installing package software-properties-common"
            sudo apt update && sudo apt-get  install -y software-properties-common
        fi

        # shellcheck disable=SC2086
        set -- ${PPA}
        for CURR_PPA do
            LogTrace "  Trigger Adding ppa: ${CURR_PPA}"
            "${SUDO}" add-apt-repository -y "${CURR_PPA}"
            shift
        done
    fi
    LogTrace "Updating apt cachce"
    "${SUDO}" apt update


    LogTrace "Upgrading packages"
    "${SUDO}" apt upgrade -y
    if [ -n "${SYSTEM_DEPS}" ]
    then
        LogTrace "Installing with apt: ${SYSTEM_DEPS}"
        # shellcheck disable=SC2086
        "${SUDO}" apt-get install -y ${SYSTEM_DEPS}
    fi
}

TriggerFlatPak()
{
    set +e 
    FLATPAK="$(command -v flatpak)"
    set -e
    if [ -z "${FLATPAK}" ]
    then
        LogTrace "FLATPAK_CHECK=\"${FLATPAK}\""
        LogTrace "flatpak not found, installing"
        "${SUDO}" apt update && "${SUDO}" apt-get  install -y flatpak
        flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    fi

  
    # shellcheck disable=SC2086
    set -- ${FLATPAK_DEPS}
    for item
    do
        LogTrace "  Trigger installing flathub: ${item}"
        flatpak install -y flathub "$item"
        shift
    done
}

TriggerSnap()
{
    if [ -n "${SNAP_DEPS}" ]
    then
        LogTrace "  Trigger installing snap: ${SNAP_DEPS}"
        # shellcheck disable=SC2086
        "${SUDO}" snap install ${SNAP_DEPS}
    fi
}

# Creates a setup of bash config located in .config
# Path:
#  Configs location (loaded dynamically) - ~/.config/bash
#  Versioning                            - ~/.local/opt/bash/share/version
#  Backups of older versions             - ~/.local/opt/bash/bkupbash
setBash() {
    BASH_SETUP_VERISON=1.2
    BASH_SETUP_VERSION_CURR=

    BASH_SETUP_CONFIG_DIR="${HOME}/.config/bash"
    BASH_SETUP_LOCAL_DIR="${HOME}/.local/opt/bash/share"
    BASH_SETUP_BACKUP="${HOME}/.local/opt/bash/bkupbash"
    BASH_SETUP_VERSION_FILE="${BASH_SETUP_LOCAL_DIR}/version"

    BASH_SETUP_BACKUP_CURR_DIR=${BASH_SETUP_BACKUP}/$(date "+%F-%T")
    BASH_SETUP_BACKUP_ROOT=${BASH_SETUP_BACKUP_CURR_DIR}/.bashrc
    BASH_SETUP_BACKUP_LOCAL=${BASH_SETUP_BACKUP_CURR_DIR}/local
    BASH_SETUP_BACKUP_CONFIG=${BASH_SETUP_BACKUP_CURR_DIR}/config

    # Files (Addded with `gzip -c < file|base64 -w0`)
    ## ~/.bashrc
    BASH_SETUP_FILE_ROOT="H4sIAEok1WQAAwtwDPGId3IM9oh39vdz83S3VVLx8Pd11ddLzs9Ly0zXT0oszlDi4kJSEe/m6eMaDFSnkZaZl6KgpFIdgGZGrZKCbkllQapCmkJNcX5RiSbQgLT8IoXMktRchcw8BZVqDONqFbhS8rkUFIrzS4uSUxVUQEqBInmpXEAAAGZylTWkAAAA"
    ## ~/.config/bash/10-ubuntudefaults
    BASH_SETUP_FILE_10_UBUNTUDEFAULTS="H4sIAMtR1WQAA5VUXW/bOBB816/Yc4PWDmwr7WMDPxU+xICbAOfeyx2KgpJWFhGa1JFUbKdof/vNUrLroMUBFziG+bE7s7OzfEXf83mhQuPL98QHLrvIFRVHkr3x2wnVzpN1dmbcVlsKDRsT5tkrCsyUd8HnoVGe88qVuYTkfFC71nDIQ1Q+du2s1ljRGMGxYWpV+ai2nNLPEDRBKoE4hWVYr2ogRvKdtdpuSdvIXpVRP7E5Tqly9k3ENyl7jA0uZKUKTFczXMwIf9f6ekK3t+k3VhPyHDtvscNBlQLQp2g7pOlao0sVmYy2oAkm/Y/EXtD3OjYUQJtpKKHRITp/FBE2zC+E2jnP5NqonQ3Z3Wrz6cPD/ac/HtYLvbU4KlxsBF+1LduKorvMRyLUqTz3xH7vNXjpmIUGKWkW0s0+NhtkCxwTy1MOw3YrfMFL4Derv5bQqUqL31frZdpAHQPp7LS/GF19vXv4uPyWz40rlcmflM+NLvqeyteXAWKUnRIv3t7c3GSXmRfvZAfUyobLx1TcXtvK7SnoZyZVo5HEqmyodLud8ML/lDT6zSWHoPxxiuiuraQjEv6kTCdtqWm9ul9uUi0fHtZ/frzfzH/okuCAJCiDgSDMdDBcBKql0fX1iLoAc6N8JduNVTuG8VqFQGfBCUY7RFA2Bkl2KoKoMoZ6Bwv0M3tHpz5X2nMJSfRwGLriYgv2OPPbGleIobKU9hFmQ7F9khp3bWWO5zlLFLQVcybcaWqmBLS6ZenZ3zQ79KNXaJufTugzvX5NDMFodDXe3C3X60W6EJpz9GSUpcmN0NVrVRjYq2IbdX0UE4lcZeMdZu/oOto7/yhijU+qJTm926Gogo3bTzJ0Dmyegfi14kIr+6WPfz/7NuoJ4dhTzrHMX1ygz7eSrh/YFyeLqzHm8Rchk6zWQp9tIg4iW6/gIlnATng8ZOyoZoVplxdHauinyTKnaetDkQPvRki+0/ENmmc8q+o4HKdSE7zYfngbU4PTJnClL6Kj6zxc+9PdyVx0+Y2G9rt/qHVBH84F96LVl69neg1/FNEP3EVRl2rN/0cgAtic8U48/yPzL67gCMLj8y/5QMLCKwYAAA=="
    ## ~/.config/bash/11-paths
    BASH_SETUP_FILE_11_PATHS="H4sIALZU1WQAAwtwDPGwVVIJAFJWKh7+vq76ejn5yYk5+kmZefrp+SBKiSsAjyIlLi4AbT3F70QAAAA="
    ## ~/.config/bash/13-alias
    BASH_SETUP_FILE_13_ALIAS="H4sIAJoh1WQAA11Ry27bMBC86ysGimE1aSU6x8YwiiBAfqDoobCdYCOuLCIUKXAppAKEfnspKekhJy5nZ2f2cQXxHaPzgWEFZA0JS7a8sPZQJLAk+1h8QLRC9/+B9f+QGNkV7rUGOeRkOcR8lUPjA6x3F4TBOZPe2ncdOS0V8EuSr3nl1MZdqgfEMve43e2xaLy7LPGhcD6aZiyFnUZZDuHCrh4P1r+hNMg3X47Y/MABO5yx3YLr1iNy6Iwji2laAQ7Bh+t8prdGog/jFMlYlO52Ek66jOJUFKKeTnJz3JXfz6evKVJqL+q4307n9Fna2Sg1E6/zdfKlT82NcSYa76RK4G8/oKMRb+Qiokc/xDSKxeiHANJ6ZcK4lCMI9xQoMhpj160kib+qeiFpn98v8y2RJTJp+GZRSOuMLXdoOV1Qm8B1tOPs/ZMZapCgpKXASvtazULlHPAf6nrLs/NcjY8Eeqpf6cJVlpkGR5TNZ3+c93OFy9KpUH3OZo3J/gH0a3VIUgIAAA=="
    ## ~/.config/bash/15-alias
    BASH_SETUP_FILE_15_COLORS="H4sIABkd1WQAA5VUWW/aQBB+jn/FyKAAKYQjh1ojV5FQVEVKlSqp1IeA0GKPYytml+7BodL+9s7ukgRCWrXIMuuZb2a+ubYCCjUwyBhPVjCTYjrTUOeCtxJRCtkEw0tUChYIj1ws7H+4YFyH4PSNIGGKRNWvl7efQyh4APRbapRT72B91OqdnXusNxn7IPEKVb8foGJJEFQoTCKmU+QaMiGJj4NiumHUhCIDnSNYxwVnJeRMOUHCZmxSlIVe9UEbyTElZyLLYLKCFDNmSg1aABca0kJpyRLt7IxCGblTJhKjiDkFffa+KHgqFuRJ5cKUKUwQBHdoYfTMaIoAli/jqWo65xu1pxtUKIkEx6/zDQJK4x5anAq2jwhh1LdOfA09cglto2R7UvC2izuCw0NwJ2oby6ALHw/bKc7b3JTlxvqgAt+QCjRHX0VQZjYTUveBKWWmCIWuKUt/VhbUSUpW53CZTFnr9L01rl/d3bSvLget89Peh8Yx1K9Z8mgzVibJn5xBoQCXWuIUyxVIJrEJVA2HsU6og3YwFq58GklDXXiyJe4Z2RBbSZQZ98kcN4KDvYrZUmCp8JXKybMioMfXNKzuljIGst4p6Je7blyr/khxQlmPk1wKoaN39eqOoPFzeD/snJzcd7r9k950OBqai2H+JOuQINoCnFrAYls7rEItcHz/J6SNEZEja0wZGW53cjsf2J8WuzRXdimoEfRQEd3WuXV2m1LoEm3R7aRf5ELpKC3k3ro6o6O1XM71UeOZdEg54ajT/1fuQOTZcFQl29A5oc3euNvaceRsUr4aSjtXpXKjw0olgKUpjS5PV/RZEFcV7C0CpeFc7LZXo9LQkvCrffwCoGXBOe1zWK2/CFuTHVAjhPX6TVjD5+KIEMm4RkRb/lqLmdGi5tQVryfDuEavPyPmDjLfx2xFeZA4i2v2/YYfD8k8JvsrCD0I3wDZlak836+fBgNYMMkL/uC7gFJS9gEuXXdIPR7cXN/c3pEzq4nt3HejjYn7OovoAkR3PI8Sugm0O/ei0t6sdI6+Gw+oBb8BXPtjkG8GAAA="
    ## ~/.config/bash/40-cargo
    BASH_SETUP_FILE_40_CARGO="H4sIAMQh1WQAA9NTUFLx8Pd11ddLTixKz9dPzStT4gIA4otecxUAAAA="

    LogTrace "Creating directories: ${PATH_LOCAL_BIN}, ${BASH_SETUP_CONFIG_DIR}, ${BASH_SETUP_LOCAL_DIR}, ${BASH_SETUP_BACKUP}"
    mkdir -p "${PATH_LOCAL_BIN}" "${BASH_SETUP_CONFIG_DIR}"  "${BASH_SETUP_LOCAL_DIR}" "${BASH_SETUP_BACKUP}"

    if [ -e "${BASH_SETUP_VERSION_FILE}" ]
    then
        BASH_SETUP_VERSION_CURR=$(cat "${BASH_SETUP_VERSION_FILE}")
        LogTrace "Found previous version install ${BASH_SETUP_VERSION_CURR}"
    fi

    if [ "${BASH_SETUP_VERSION_CURR}" != "${BASH_SETUP_VERISON}" ]
    then
        LogTrace "Installing new verison- Current version: ${BASH_SETUP_VERSION_CURR} is not matching target version ${BASH_SETUP_VERISON}"

        LogTrace "Creting backup folders: ${BASH_SETUP_BACKUP_CURR_DIR}, ${BASH_SETUP_BACKUP_LOCAL}, ${BASH_SETUP_BACKUP_CONFIG}"
        mkdir -p "${BASH_SETUP_BACKUP_CURR_DIR}" "${BASH_SETUP_BACKUP_LOCAL}" "${BASH_SETUP_BACKUP_CONFIG}"

        LogTrace "Backing up old version"
        cp  "${HOME}/.bashrc" "${BASH_SETUP_BACKUP_ROOT}"
        cp  -r "${BASH_SETUP_LOCAL_DIR}" "${BASH_SETUP_BACKUP_LOCAL}"
        cp  -r "${BASH_SETUP_CONFIG_DIR}" "${BASH_SETUP_BACKUP_CONFIG}"

        LogTrace "Creating new config folder"
        mkdir -p "${BASH_SETUP_CONFIG_DIR}"

        LogTrace "Creating file ${BASH_SETUP_CONFIG_DIR}"

        LogTrace "Putting in ${BASH_SETUP_CONFIG_DIR}/10-ubuntudefaults: "
        LogTrace "$(echo "${BASH_SETUP_FILE_10_UBUNTUDEFAULTS}"|base64 -d|gunzip -c)"
        (echo "${BASH_SETUP_FILE_10_UBUNTUDEFAULTS}"|base64 -d|gunzip -c) > "${BASH_SETUP_CONFIG_DIR}/10-ubuntudefaults"

        LogTrace "Putting in ${BASH_SETUP_CONFIG_DIR}/11-paths: "
        LogTrace "$(echo "${BASH_SETUP_FILE_11_PATHS}"|base64 -d|gunzip -c)"
        (echo "${BASH_SETUP_FILE_11_PATHS}"|base64 -d|gunzip -c) > "${BASH_SETUP_CONFIG_DIR}/11-paths"

        LogTrace "Putting in ${BASH_SETUP_CONFIG_DIR}/13-alias: "
        LogTrace "$(echo "${BASH_SETUP_FILE_13_ALIAS}"|base64 -d|gunzip -c)"
        (echo "${BASH_SETUP_FILE_13_ALIAS}"|base64 -d|gunzip -c) > "${BASH_SETUP_CONFIG_DIR}/13-alias"

        LogTrace "Putting in ${BASH_SETUP_CONFIG_DIR}/15-colors: "
        LogTrace "$(echo "${BASH_SETUP_FILE_15_COLORS}"|base64 -d|gunzip -c)"
        (echo "${BASH_SETUP_FILE_15_COLORS}"|base64 -d|gunzip -c) > "${BASH_SETUP_CONFIG_DIR}/15-colors"

        LogTrace "Putting in ${BASH_SETUP_CONFIG_DIR}/40-cargo: "
        LogTrace "$(echo "${BASH_SETUP_FILE_40_CARGO}"|base64 -d|gunzip -c)"
        (echo "${BASH_SETUP_FILE_40_CARGO}"|base64 -d|gunzip -c) > "${BASH_SETUP_CONFIG_DIR}/40-cargo"

        LogTrace "Overriding main .bashrc"
        (echo "${BASH_SETUP_FILE_ROOT}"|base64 -d|gunzip -c) > "${HOME}/.bashrc"

        LogTrace "Overriding version fiel with ${BASH_SETUP_VERISON}"
        echo "${BASH_SETUP_VERISON}" > "${BASH_SETUP_VERSION_FILE}"
    else
        LogTrace "Current version: ${BASH_SETUP_VERSION_CURR} is matching target version ${BASH_SETUP_VERISON}"
    fi
}

CustomDisableESM()
{
    if [ -e "/etc/apt/apt.conf.d/20apt-esm-hook.conf" ]
    then
        LogTrace "Disabling ESM hook"
        PATH_DISABLED_APT_ESM="$HOME/.local/disabled-esm"
        mkdir -p "${PATH_DISABLED_APT_ESM}"
        ${SUDO} mv "/etc/apt/apt.conf.d/20apt-esm-hook.conf" "${PATH_DISABLED_APT_ESM}/"
    fi
}

CustomPC98Font()
{
    RETROFONT_PATH_BASE="$HOME/.local/share/retrofont"
    RETROFONT_PATH_VERSION="${RETROFONT_PATH_BASE}/version"

    RETROFONT_PATH_FONTLOC_BASE="${HOME}/.local/share/fonts"
    RETROFONT_PATH_FONTLOC_TTF="${RETROFONT_PATH_FONTLOC_BASE}/ttf"

    RETROFONT_PATH_TEMP_BASE="${PATH_TEMP}/rertofont"
    RETROFONT_PATH_TEMP_ZIP="${RETROFONT_PATH_TEMP_BASE}/retrofont.zip"
    RETROFONT_PATH_TEMP_EXTRACT="${RETROFONT_PATH_TEMP_BASE}/fonts"
    RETROFONT_TARGETS="Px437_DOS-V_re_JPN24.ttf Px437_DOS-V_re_JPN30.ttf"

    set -x
    RETROFONT_VERSION=2.2
    RETROFONT_VERSION_CURR=
    if [ -e "$RETROFONT_PATH_VERSION" ]
    then
        RETROFONT_VERSION_CURR=$(cat "${RETROFONT_PATH_VERSION}")
        LogTrace "RetroFont - Got current version ${RETROFONT_VERSION_CURR}"
    fi

    RETROFONT_URL="https://int10h.org/oldschool-pc-fonts/download/oldschool_pc_font_pack_v${RETROFONT_VERSION}_FULL.zip"

    if [ "${RETROFONT_VERSION}" != "${RETROFONT_VERSION_CURR}" ]
    then
        LogTrace "RetroFont - Ensure folder ${RETROFONT_PATH_TEMP_BASE}"
        mkdir -p "${RETROFONT_PATH_TEMP_BASE}"

        LogTrace "RetroFont - Downloading fonts from ${RETROFONT_URL} to ${RETROFONT_PATH_TEMP_ZIP}"
        curl -Lo "${RETROFONT_PATH_TEMP_ZIP}" "${RETROFONT_URL}"
        PREV_FOLDER="${PWD}"

        LogTrace "RetroFont - Ensuring folder ${RETROFONT_PATH_TEMP_EXTRACT}"
        mkdir -p "${RETROFONT_PATH_TEMP_EXTRACT}"
        LogTrace "RetroFont - Chnaging directory to ${RETROFONT_PATH_TEMP_EXTRACT}"
        cd "${RETROFONT_PATH_TEMP_EXTRACT}" || (LogError "Failed to enter ${RETROFONT_PATH_TEMP_EXTRACT}" && exit 1)
        LogTrace "RetroFont - Extractint ${RETROFONT_PATH_TEMP_ZIP}"
        unzip -qq "${RETROFONT_PATH_TEMP_ZIP}"

        LogTrace "RetroFont - Ensuring font folder \"${RETROFONT_PATH_FONTLOC_TTF}\""
        mkdir -p "${RETROFONT_PATH_FONTLOC_TTF}"

        # It doesn't like the spaces in the folder
        # shellcheck disable=SC2086
        cd ${RETROFONT_PATH_TEMP_EXTRACT}/ttf\ -\ Px\ \(pixel\ outline\) || (LogError "Failed to enter ${RETROFONT_PATH_TEMP_EXTRACT}/ttf\ -\ Px\ \(pixel\ outline\)" && exit 1)
        # shellcheck disable=SC2086
        set -- ${RETROFONT_TARGETS}
        for RETROFONT_CURR_FONT
        do
            LogTrace "RetroFont - Importing font ${RETROFONT_CURR_FONT}"
            cp "${RETROFONT_CURR_FONT}" "${RETROFONT_PATH_FONTLOC_TTF}"
        done

        cd "${PREV_FOLDER}" || (LogError "Failed to enter ${PREV_FOLDER}" && exit 1)

        LogTrace "Updating Fonts"
        fc-cache -rv

        if [ ! -e "$RETROFONT_PATH_BASE" ]
        then
            LogTrace "Bumping version file to: \"${RETROFONT_VERSION}\""
            mkdir -p "${RETROFONT_PATH_BASE}"
            echo "${RETROFONT_VERSION}" > "${RETROFONT_PATH_VERSION}"
        fi
    fi
    set +x
}

CustomRust()
{
    set +e
    RUSTUP=$(command -v rustup)
    set -e
    RUST_VERSION=1.71.1
    PATH="${PATH}:${HOME}/.cargo/bin"
    RUST_CURR_VERSION=$(rustc --version|awk '{print $2}')
    if [ -z "${RUSTUP}" ]
    then
        LogTrace "Installing rust"
        TEMP_RUSTUP="${PATH_TEMP}/rustup"
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o "${TEMP_RUSTUP}"
        chmod +x "${TEMP_RUSTUP}"
        "${TEMP_RUSTUP}" -y
        PATH="${PATH}:${HOME}/.cargo/bin"
    else
        if [ "${RUST_CURR_VERSION}" != "${RUST_VERSION}" ]
        then
            LogTrace "Updating rust"

            rustup update
        fi
    fi
}

# custom installs
CustomNode()
{
    # Disable error handling to check if command exist
    set +e
    FNM=$(command -v fnm)
    set -e
    if [ -z "$(command -v cargo)" ]
    then
        LogTrace "Rust wasnt detected - installing"
        CustomRust
    fi

    # need rust
    if [ -z "${FNM}" ]
    then
        LogTrace "Installing fnm"
        cargo install fnm
        LogTrace "Loading fnm shell env"
        # shellcheck disable=2016
        echo 'eval "$(fnm env --use-on-cd)"' > "${HOME}/.config/bash/41-node"
        LogTrace "Installing latest lts node"
        fnm install --lts
    else
        fnm install --lts
    fi
}

CustomBashLSP()
{
    # Disable error handling to check if command exist
    set +e
    BASH_LSP=$(command -v bash-language-server)
    set -e

    if [ -n "$(command -v npm)" ]
    then
        LogTrace "Node wasnt detected - installing"
        CustomNode
    fi

    if [ -z "${BASH_LSP}" ]
    then
        if [ -n "$(command -v "node")" ]
        then
            LogTrace "Installing bash-language-server using npm"
            npm i -g bash-language-server
        fi
    fi
}

CustomGo()
{
    GO_VERSION_CURR=
    GO_VERSION_TEMPLATE=
    INSTALL_GO="false"
    # Disable error handling to check if command exist
    set +e
    GO="$(command -v go)"
    set -e
    GO_VERSION=1.21.0
    GO_URL_PATH="https://go.dev/dl/"
    GO_URL_FILE="go${GO_VERSION}.linux-amd64.tar.gz"
    GO_URL_FULL="${GO_URL_PATH}${GO_URL_FILE}"


    if [ -n "${GO}" ]
    then
        GO_VERSION_CURR=$(go version)
        GO_VERSION_TEMPLATE="go version go${GO_VERSION} linux/amd64"
    fi

    if [ -z "${GO}" ]
    then
        INSTALL_GO="true"
    else
         if [ "${GO_VERSION_TEMPLATE}" != "${GO_VERSION_CURR}" ]
         then
            INSTALL_GO="true"
         fi
    fi

    if [ "${INSTALL_GO}" = "true" ]
    then
        LogTrace "Installing Go version: ${GO_VERSION}"
        LogTrace "Downloading ${GO_URL_FULL} to ${PATH_TEMP}/${GO_URL_FILE}"
        curl -L "${GO_URL_FULL}" -o "${PATH_TEMP}/${GO_URL_FILE}"
        LogTrace "Deleting old Go folder"
        rm -rf "${PATH_LOCAL_BIN}/go"
        LogTrace "extracting new Go folder"
        tar -C "${PATH_LOCAL_BIN}" -xzf "${PATH_TEMP}/${GO_URL_FILE}"
    fi
}

CustomTidal()
{
    # Disable error handling to check if command exist
    set +e
    TIDAL=$(command -v tidal-hifi)
    set -e
    TIDAL_VERSION=5.5.0
    TIDAL_VERSION_CURR=$(dpkg -l tidal-hifi |grep tidal-hifi|awk '{print $3}')
    TIDAL_URL_PATH="https://github.com/Mastermindzh/tidal-hifi/releases/download/${TIDAL_VERSION}/"
    TIDAL_URL_FILE="tidal-hifi_${TIDAL_VERSION}_amd64.deb"
    TIDAL_URL_FULL="${TIDAL_URL_PATH}${TIDAL_URL_FILE}"

    if [ -z "${TIDAL}" ] && [ "${TIDAL_VERSION}" != "${TIDAL_VERSION_CURR}" ]
    then
        LogTrace "Installing Tidal-hifi version: ${TIDAL_VERSION}"
        LogTrace "Downloading ${TIDAL_URL_FULL} to ${PATH_TEMP}/${TIDAL_URL_FILE}"
        curl -L "${TIDAL_URL_FULL}" -o "${PATH_TEMP}/${TIDAL_URL_FILE}"
        LogTrace "Installing tidal deb package"
        sudo apt-get install -y "${PATH_TEMP}/${TIDAL_URL_FILE}"
    fi
}

CustomLutris()
{
    set +e
    LUTRIS=$(command -v lutris)
    set -e
    # shellcheck disable=SC2034
    PATH_LUTRIS="${PATH_LOCAL_BIN}"
    LUTRIS_VERSION=0.5.13
    LUTRIS_CURR_VERSION=
    if [ -n "${LUTRIS}" ]
    then
        LUTRIS_CURR_VERSION=$(lutris --version)
    else
        LUTRIS_CURR_VERSION="null"
    fi

    LUTRIS_VERSION_TEMPLATE=lutris-${LUTRIS_VERSION}
    LUTRIS_URL_PATH="https://github.com/lutris/lutris/releases/download/v${LUTRIS_VERSION}/"
    LUTRIS_URL_FILE="lutris_${LUTRIS_VERSION}_all.deb"
    LUTRIS_URL_FULL="${LUTRIS_URL_PATH}${LUTRIS_URL_FILE}"


    if [ -z "${LUTRIS}" ] && [ "${LUTRIS_CURR_VERSION}" != "${LUTRIS_VERSION_TEMPLATE}" ]
    then
        LogTrace "Installing Lutris ${LUTRIS_VERSION}"
        LogTrace "Downloading ${LUTRIS_URL_FULL} to ${PATH_TEMP}/${LUTRIS_URL_FILE}"
        curl -L "${LUTRIS_URL_FULL}" -o "${PATH_TEMP}/${LUTRIS_URL_FILE}"
        LogTrace "Installing lutris deb package"
        sudo apt-get install -y "${PATH_TEMP}/${LUTRIS_URL_FILE}"
    fi
}

CustomTerraform()
{
    # Disable error handling to check if command exist
    set +e
    TERRAFORM=$(command -v terraform)
    set -e
    PATH_TERRAFORM="${PATH_LOCAL_BIN}"
    TERRAFORM_VERSION=1.5.5
    TERRAFORM_VERSION_CURR=
    TERRAFORM_URL_PATH="https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/"
    TERRAFORM_URL_FILE="terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
    TERRAFORM_URL_FULL="${TERRAFORM_URL_PATH}${TERRAFORM_URL_FILE}"

    if [ -n "${TERRAFORM}" ]
    then
        TERRAFORM_VERSION_CURR=$(terraform --version)
    else
        TERRAFORM_VERSION_CURR="null"
    fi

    TERRAFORM_VERSION_TEMPLATE="Terraform v${TERRAFORM_VERSION} on linux_amd64"

    if [ -z "${TERRAFORM}" ] && [ "${TERRAFORM_VERSION_CURR}" != "${TERRAFORM_VERSION_TEMPLATE}"  ]
    then
        LogTrace "Installing Terraform"
        LogTrace "Downloading ${TERRAFORM_URL_FULL} to ${PATH_TEMP}/${TERRAFORM_URL_FILE}"
        curl -L "${TERRAFORM_URL_FULL}" -o "${PATH_TEMP}/${TERRAFORM_URL_FILE}"
        LogTrace "Removing old terraform package"
        rm  -f "${PATH_LOCAL_BIN}/terraform"
        PREV_FOLDER="${PWD}"
        cd "${PATH_TEMP}" || (LogError "${PATH_TEMP} doesnt exist" && exit 1)
        LogTrace "Extracting Terraform version ${TERRAFORM_VERSION}"
        unzip -qq "${TERRAFORM_URL_FILE}"

        LogTrace "Moving terraform binary"
        mv terraform "${PATH_TERRAFORM}/terraform"
        LogTrace "Backing down"
        cd "${PREV_FOLDER}" || (LogError "${PREV_FOLDER} doesnt exist" && exit 1)
    fi
}

CustomAWS()
{
    # Disable error handling to check if command exist
    set +e
    AWSCLI=$(command -v aws)
    set -e

    # shellcheck disable=SC2034
    PATH_AWSCLI="${PATH_LOCAL_BIN}"
    AWSCLI_URL_PATH="https://awscli.amazonaws.com/"
    AWSCLI_URL_FILE="awscli-exe-linux-x86_64.zip"
    AWSCLI_URL_FULL="${AWSCLI_URL_PATH}${AWSCLI_URL_FILE}"
    if [ -z "${AWSCLI}" ]
    then
        LogTrace "Installing AWS cli"

        LogTrace "Downloading ${AWSCLI_URL_FULL} to ${PATH_TEMP}/${AWSCLI_URL_FILE}"
        curl -L "${AWSCLI_URL_FULL}" -o "${PATH_TEMP}/${AWSCLI_URL_FILE}"
        PREV_FOLDER="${PWD}"
        LogTrace "Changing to folder: ${PATH_TEMP}"
        cd "${PATH_TEMP}" || (LogError "${PATH_TEMP} doesnt exist" && exit 1)
        LogTrace "Extracting ${AWSCLI_URL_FILE}"
        unzip -qq "${AWSCLI_URL_FILE}"
        LogTrace "Installing aws"
        "${SUDO}" ./aws/install
        LogTrace "Changing to folder: ${PREV_FOLDER}"
        cd "${PREV_FOLDER}" || (LogError "${PREV_FOLDER} doesnt exist" && exit 1)
    fi
}

CustomST()
{
    ST_PATH_REPO=${PATH_LOCAL_REPO}/st
    ST_GIT="https://github.com/LukeSmithxyz/st.git"
    ST_GIT_STATUS=
    ST_GIT_CLONED=
    GIT=$(command -v git)
    CLANG=$(command -v clang)

    LogTrace "WARNING: Cleaning system deps"
    SYSTEM_DEPS=
    
    if [ -z "${GIT}" ]
    then
        LogError "git not found"
        exit 1
    fi

    if [ -z "${CLANG}" ]
    then
        LogError "no clang"
        exit 1
    fi

    if [ ! -e "/usr/include/X11/Xatom.h" ]
    then
        AddAptDep "x11proto-dev"
    fi

    if [ ! -e "/usr/include/X11/Xlib.h" ]
    then
        AddAptDep "libx11-dev"
    fi

    if [ ! -e "/usr/include/X11/Xft/Xft.h" ]
    then
        AddAptDep "libxft-dev"
    fi

    if [ ! -e "/usr/include/harfbuzz/hb.h" ]
    then
        AddAptDep "libharfbuzz-dev"
    fi

    if [ -n "$SYSTEM_DEPS" ]
    then
        TriggerAPT
    fi

    if [ ! -e "$ST_PATH_REPO" ]
    then
        LogTrace "Ensuring folder"
        mkdir -p "$PATH_LOCAL_REPO"
        git clone "$ST_GIT" "${ST_PATH_REPO}"
        ST_GIT_CLONED="true"
    fi

    PREV_FOLDER="${PWD}"
    cd "${ST_PATH_REPO}" || (LogError "Couldn't enter ${ST_PATH_REPO}" && exit 1)
    ST_GIT_STATUS=$(git pull)

    if [ "$ST_GIT_STATUS" != "Already up to date." ] || [ -n "$ST_GIT_CLONED" ]
    then
        CC=clang make
        ${SUDO} make install
    fi

    cd "${PREV_FOLDER}"
}

CustomMupdf()
{
    # seems to not worth it
        # Debian/ubuntu doesn't ship a custom vendored lcms2 which disables ICC
        # For refence see: https://groups.google.com/g/linux.debian.bugs.dist/c/XMk838qMsjA?pli=1

    # It is not possible to build with system dependnecies in the build system natively but it produce a static binary(libc breakage still possible)
    MUPDF_VERSION=1.23.0
    MUPDF_PATH_REPO=${PATH_LOCAL_REPO}/mupdf-${MUPDF_VERSION}-source
    MUPDF_URL="https://mupdf.com/downloads/archive/mupdf-${MUPDF_VERSION}-source.tar.gz"
    CLANG=$(command -v clang)
    MAKEOPTS=""
    # shared binary seems to lead to broken linkage
    # MAKEOPTS="shared=yes"

    LogTrace "WARNING: Cleaning system deps"
    SYSTEM_DEPS=

    if [ ! -e "/usr/include/harfbuzz/hb.h" ]
    then
        AddAptDep "libharfbuzz-dev"
    fi

    if [ ! -e "/usr/include/freetype2" ]
    then
        AddAptDep "libfreetype-dev"
    fi

    if [ ! -e "/usr/share/doc/mesa-common-dev/" ]
    then
        AddAptDep "mesa-common-dev"
    fi

    if [ ! -e "/usr/include/GL/gl.h" ]
    then
        AddAptDep libgl-dev
    fi

    if [ ! -e "/usr/lib/x86_64-linux-gnu/libGLdispatch.so" ]
    then
        AddAptDep "libglvnd-dev"
    fi

    if [ ! -e "/usr/include/GL/glu.h" ]
    then
        AddAptDep "libglu1-mesa-dev"
    fi

    if [ ! -e "/usr/share/doc/xorg-dev/copyright" ]
    then
        AddAptDep xorg-dev
    fi

    if [ ! -e "/usr/share/doc/libxcursor-dev/copyright" ]
    then
        AddAptDep "libxcursor-dev"
    fi

    if [ ! -e "/usr/share/doc/libxrandr-dev/copyright" ]
    then
        AddAptDep "libxrandr-dev"
    fi

    if [ ! -e "/usr/share/doc/libxinerama-dev/copyright" ]
    then
        AddAptDep "libxinerama-dev"
    fi

    AddAptDep "extract"
    AddAptDep "unzip"



    if [ -n "$SYSTEM_DEPS" ]
    then
        TriggerAPT
    fi
    set -x
    if [ ! -e "$MUPDF_PATH_REPO" ]
    then
        LogTrace "Ensuring folder"
        mkdir -p "$PATH_LOCAL_REPO"
        curl -Lo "${PATH_TEMP}/mupdf-${MUPDF_VERSION}-source.tar.gz" "${MUPDF_URL}"
        PREV_FOLDER="${PWD}"
        cd "${PATH_LOCAL_REPO}"
        tar xf "${PATH_TEMP}/mupdf-${MUPDF_VERSION}-source.tar.gz"
        cd "${MUPDF_PATH_REPO}" || (LogError "Couldn't enter ${MUPDF_PATH_REPO}" && exit 1)

        if [ -e "'/usr/local/include/mupdf':" ]
        then
            # Potential breakage between versions
            LogTrace "Cleaning old installation"
            sudo rm -r /usr/local/include/mupdf /usr/local/share/doc/mupdf
            sudo rm    /usr/local/lib/libmupdf.so \
                       /usr/local/bin/mupdf-gl /usr/local/bin/mupdf-x11 \
                       /usr/local/bin/muraster  /usr/local/bin/mutool \
                       /usr/local/share/man/man1/mupdf.1 \
                       /usr/local/share/man/man1/mutool.1
        fi

        # shellcheck disable=2086
        CC=clang make ${MAKEOPTS} -j
        # shellcheck disable=2086
        ${SUDO} make ${MAKEOPTS} install CC=clang
        cd "${PREV_FOLDER}"
    fi
}

CustomDisableESM
CustomPC98Font
setBash


AddAptDep "unzip" "unzip"
AddAptDep "curl" "curl"

if [ -n "$SYSTEM_DEPS" ]
then
    TriggerAPT
fi

# System

AddAptDep "podman" " podman buildah"
AddAptDep "v4l2-ctl" "v4l-utils"
AddAptDep "howdy" "howdy" "ppa:boltgolt/howdy"
AddAptDep "mpv"
AddAptDep "sshd" "openssh-server"
AddAptDep "xclip"
AddAptDep "mupdf"
AddAptDep "virt-manager" " virt-manager qemu-system-data  
        qemu-system-gui qemu-system-mips qemu-system-misc qemu-system-ppc  
        qemu-system-s390x qemu-system-sparc qemu-system-x86 
        qemu-system-x86-microvm "
AddAptDep "curl"
AddAptDep "unzip"
AddAptDep "addads" "python3.10-venv"
AddAptDep "tree"

# Multimedia
AddFlatpakDep "com.plexamp.Plexamp"

# Programming
AddAptDep "hx" "helix" "ppa:maveonair/helix-editor"
AddAptDep "git"
AddAptDep "clang" "build-essential clang llvm make autoconf cmake ninja-build"
AddAptDep "clangd"
AddAptDep "gnat" "gprbuild gnat"
AddAptDep "shellcheck"
AddAptDep "ndisasm" "nasm"
AddAptDep "inform6" "inform-docs inform-mode inform6-compiler inform6-library frotz"

# Utilities
AddAptDep "keepassxc"
AddAptDep "transmission-gtk"
AddAptDep "ffmpeg"
AddAptDep "chromium" "chromium-browser"

# Games
AddFlatpakDep "net.pcsx2.PCSX2"
AddFlatpakDep "com.valvesoftware.Steam"
AddFlatpakDep "com.dosbox_x.DOSBox-X"
AddSnapDep "discord" "discord"


LogTrace "Installing:"
LogTrace " ppa: ${PPA}"
LogTrace " apt: ${SYSTEM_DEPS}"
LogTrace "----"
LogTrace " snap: ${SNAP_DEPS}"
LogTrace "----"
LogTrace " flatpak: ${FLATPAK_DEPS}"


TriggerAPT
TriggerFlatPak
TriggerSnap

# Customs
## Programming
CustomGo
CustomRust
CustomNode
CustomBashLSP
CustomTerraform
CustomAWS
CustomLutris

## Multimedia
CustomTidal

## System
CustomST
# Seems to not worth it kept due to effort
# CustomMupdf
